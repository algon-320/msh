use super::structures::*;
use std::collections::VecDeque;
use std::iter::FromIterator;

whitespace = " " / "\n" / "\t"
commentout = "#" [^\n]* [\n]?
ignored = whitespace
ign<E> = ignored* E ignored*

pub command_line -> Option<List> = list?

list -> List
    = l:(p:pipeline ign<";"> { Connector::Continue(p) }
       / p:pipeline ign<"&&"> { Connector::And(p) }
       / p:pipeline ign<"||"> { Connector::Or(p) } )* p:pipeline bg:ign<"&">?
    {
        let bg = bg.map(|_| BackgroundFlag);
        let mut list = l;
        list.push(Connector::ListTerm(p));
        List(list, bg)
    }

pipeline -> PipeLine
    = p:(c:command ign<"|&"> { Pipe::Both(c) } / c:command !ign<"||"> ign<"|"> { Pipe::Stdout(c) })* c:command
    {
        let mut pipeline = VecDeque::from_iter(p.into_iter());
        pipeline.push_back(Pipe::PipeLineTerm(c));
        PipeLine(pipeline)
    }

command -> Command
    = words:(string ++ (ignored+)) r:redirects
    {
        let exe = Executable::File { command_name: words[0].clone(), arguments: words[1..].to_vec() };
        Command { exe: exe, redirect_in: r.0, redirect_out: r.1, redirect_err: r.2 }
    }
    / "(" l:list ")" r:redirects
    {
        let exe = Executable::SubShell(l);
        Command { exe: exe, redirect_in: r.0, redirect_out: r.1, redirect_err: r.2 }
    }
redirects -> (Option<RedirectIn>, Option<RedirectOut>, Option<RedirectOut>)
    = r:redirect*
    {
        // in, out, err それぞれ最後のものを残す
        let mut redirect_in: Option<RedirectIn> = None;
        let mut redirect_out: Option<RedirectOut> = None;
        let mut redirect_err: Option<RedirectOut> = None;

        for r in r.iter() {
            match r {
                Redirect::In(rin) => {
                    redirect_in = Some(rin.clone());
                }
                Redirect::Out(rout) => {
                    redirect_out = Some(rout.clone());
                }
                Redirect::Err(rerr) => {
                    redirect_err = Some(rerr.clone());
                }
            }
        }

        (redirect_in, redirect_out, redirect_err)
    }

redirect -> Redirect
    = rin: redirect_in { Redirect::In(rin) }
    / rerr: redirect_err { Redirect::Err(rerr) }
    / rout: redirect_out { Redirect::Out(rout) }

redirect_in -> RedirectIn
    = ign<"<<"> s:$(char+) { RedirectIn::Heredoc(s.to_string()) }
    / ign<"<"> s:string { RedirectIn::Normal(s) }

redirect_out -> RedirectOut
    = ign<">+"> s:string { RedirectOut::Append(s) }
    / ign<">="> s:string { RedirectOut::Overwrite(s) }
    / ign<">"> s:string { RedirectOut::Normal(s) }

redirect_err -> RedirectOut
    = ign<">+!"> s:string { RedirectOut::Append(s) }
    / ign<">=!"> s:string { RedirectOut::Overwrite(s) }
    / ign<">!"> s:string { RedirectOut::Normal(s) }

string -> Str
    = quoted / raw_str / variable / subshell_result

quoted -> Str
    = "\"" c:quoted_content<"\""> "\"" { Str::Quoted(c) }
    / "'" c:quoted_content<"'"> "'"   { Str::Quoted(c) }
quoted_content<Q> = (ss:subshell_result { ss } / v:variable { v } / s:$(!"$" !Q .)+ { Str::Raw(s.to_string()) })*

raw_str -> Str
    = s:$(char+) { Str::Raw(s.to_string()) }
variable -> Str
    = "$" name:$(char_varname+) { Str::Variable(name.to_string()) }
    / "${" name:$(char_varname+) "}" { Str::Variable(name.to_string()) }
subshell_result -> Str
    = "$(" l:list ")" { Str::SubShellResult(l) }

char
    = [a-zA-Z] / [^;&()|^<>?*\[\]$`'"\\!{} ] / escaped
char_varname
    = [a-zA-Z] / [0-9] / [_-]
escaped
    = "\\" [;&()|^<>?*\[\]$`'"\\!{}tn ]
